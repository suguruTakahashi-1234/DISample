import DomainLayer
import SwiftUI

@MainActor
public struct {{ argument.screenName }}View<Router: {{ argument.screenName }}Wireframe, Dependency: {{ argument.screenName }}PresenterDependency>: View {
    private let router: Router
    @StateObject private var presenter: {{ argument.screenName }}Presenter<Dependency>

    public init(router: Router, dependency: Dependency) {
        self.router = router
        _presenter = .init(wrappedValue: {{ argument.screenName }}Presenter(dependency: dependency))
    }

    public var body: some View {
        Text("{{ argument.screenName }}View")
            .task {
                await presenter.onAppear()
            }
            .onDisappear {
                presenter.onDisappear()
            }
    }
}

// MARK: - Preview

import PreviewSnapshots

struct {{ argument.screenName }}View_Previews: PreviewProvider, SnapshotTestable {
    static var previews: some View {
        snapshots.previews.previewLayout(.sizeThatFits)
    }

    static var snapshots: PreviewSnapshots<{{ argument.routerName }}RouterDependencyMock> {
        .init(
            configurations: configurationAllSizesWithEmpty,
            configure: { state in
                {{ argument.screenName }}View(router: {{ argument.routerName }}Router(dependency: {{ argument.routerName }}RouterDependencyMock.empty), dependency: state)
            }
        )
    }
}
