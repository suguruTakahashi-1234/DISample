import DomainLayer
import SwiftUI

// TODO: Add transition source {{ argument.routerName }}Wireframe
//    associatedtype {{ argument.screenName }}PresenterDependencyAT: {{ argument.screenName }}PresenterDependency
//
//    func create{{ argument.screenName }}View() -> {{ argument.screenName }}View<{{ argument.routerName }}WireframeAT, {{ argument.screenName }}PresenterDependencyAT>

// TODO: Add {{ argument.routerName }}Router
//    public func create{{ argument.screenName }}View() -> {{ argument.screenName }}View<{{ argument.routerName }}Router, Dependency> {
//        {{ argument.screenName }}View(router: self, dependency: dependency)
//    }

// MARK: - View

@MainActor
public struct {{ argument.screenName }}View<Router: {{ argument.routerName }}Wireframe, Dependency: {{ argument.screenName }}PresenterDependency>: View {
    private let router: Router
    @State private var presenter: {{ argument.screenName }}Presenter<Dependency>

    public init(router: Router, dependency: Dependency) {
        self.router = router
        presenter = {{ argument.screenName }}Presenter(dependency: dependency)
    }

    public var body: some View {
        VStack {
            Text(String(localized: "{{ argument.screenName }}View", bundle: .module))
        }
        .navigationTitle(String(localized: "{{ argument.screenName }}View", bundle: .module))
        .task {
            await presenter.onAppear()
        }
        .onDisappear {
            presenter.onDisappear()
        }
    }
}

// MARK: - Preview

import PreviewSnapshots

struct {{ argument.screenName }}View_Previews: PreviewProvider, SnapshotTestable {
    static var previews: some View {
        snapshots.previews.previewLayout(.sizeThatFits)
    }

    static var snapshots: PreviewSnapshots<{{ argument.routerName }}RouterDependencyMock> {
        .init(
            configurations: standard,
            configure: { state in
                {{ argument.screenName }}View(router: {{ argument.routerName }}Router.empty, dependency: state)
                    .navigationStacked()
            }
        )
    }
}
