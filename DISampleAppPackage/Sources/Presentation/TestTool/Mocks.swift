///
/// @Generated by Mockolo
///



import DomainLayer
import Foundation


public final class HogePresenterDependencyMock: HogePresenterDependency {
    public init() { }


}

public final class AppRootRouterDependencyMock: AppRootRouterDependency {
    public init() { }
    public init(osLogDriver: OSLogDriverProtocol = OSLogDriverProtocolMock(), libraryLicenseDriver: LibraryLicenseDriverProtocol = LibraryLicenseDriverProtocolMock(), firebaseSetupDriver: FirebaseSetupDriverProtocol = FirebaseSetupDriverProtocolMock()) {
        self.osLogDriver = osLogDriver
        self.libraryLicenseDriver = libraryLicenseDriver
        self.firebaseSetupDriver = firebaseSetupDriver
    }


    public private(set) var osLogDriverSetCallCount = 0
    public var osLogDriver: OSLogDriverProtocol = OSLogDriverProtocolMock() { didSet { osLogDriverSetCallCount += 1 } }

    public private(set) var libraryLicenseDriverSetCallCount = 0
    public var libraryLicenseDriver: LibraryLicenseDriverProtocol = LibraryLicenseDriverProtocolMock() { didSet { libraryLicenseDriverSetCallCount += 1 } }

    public private(set) var firebaseSetupDriverSetCallCount = 0
    public var firebaseSetupDriver: FirebaseSetupDriverProtocol = FirebaseSetupDriverProtocolMock() { didSet { firebaseSetupDriverSetCallCount += 1 } }
}

public final class FirebaseSetupDriverProtocolMock: FirebaseSetupDriverProtocol {
    public init() { }


    public private(set) var configureCallCount = 0
    public var configureHandler: (() -> ())?
    public func configure()  {
        configureCallCount += 1
        if let configureHandler = configureHandler {
            configureHandler()
        }
        
    }
}

public final class LibraryLicenseDriverProtocolMock: LibraryLicenseDriverProtocol {
    public init() { }
    public init(licenseList: [License] = [License]()) {
        self.licenseList = licenseList
    }


    public private(set) var licenseListSetCallCount = 0
    public var licenseList: [License] = [License]() { didSet { licenseListSetCallCount += 1 } }
}

public final class OSLogDriverProtocolMock: OSLogDriverProtocol {
    public init() { }


    public private(set) var logCallCount = 0
    public var logHandler: ((LogEventType, LogLevel, String, String, Int) -> ())?
    public func log(_ _arg: LogEventType, level: LogLevel, file: String, function: String, line: Int)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(_arg, level, file, function, line)
        }
        
    }
}

public final class AppRootPresenterDependencyMock: AppRootPresenterDependency {
    public init() { }
    public init(osLogDriver: OSLogDriverProtocol = OSLogDriverProtocolMock(), firebaseSetupDriver: FirebaseSetupDriverProtocol = FirebaseSetupDriverProtocolMock()) {
        self.osLogDriver = osLogDriver
        self.firebaseSetupDriver = firebaseSetupDriver
    }


    public private(set) var osLogDriverSetCallCount = 0
    public var osLogDriver: OSLogDriverProtocol = OSLogDriverProtocolMock() { didSet { osLogDriverSetCallCount += 1 } }

    public private(set) var firebaseSetupDriverSetCallCount = 0
    public var firebaseSetupDriver: FirebaseSetupDriverProtocol = FirebaseSetupDriverProtocolMock() { didSet { firebaseSetupDriverSetCallCount += 1 } }
}

public final class LicenseListPresenterDependencyMock: LicenseListPresenterDependency {
    public init() { }
    public init(libraryLicenseDriver: LibraryLicenseDriverProtocol = LibraryLicenseDriverProtocolMock()) {
        self.libraryLicenseDriver = libraryLicenseDriver
    }


    public private(set) var libraryLicenseDriverSetCallCount = 0
    public var libraryLicenseDriver: LibraryLicenseDriverProtocol = LibraryLicenseDriverProtocolMock() { didSet { libraryLicenseDriverSetCallCount += 1 } }
}

public final class SettingPresenterDependencyMock: SettingPresenterDependency {
    public init() { }


}

public final class MogePresenterDependencyMock: MogePresenterDependency {
    public init() { }


}

