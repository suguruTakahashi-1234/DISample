///
/// @Generated by Mockolo
///



import DomainLayer
import Foundation
import SwiftUI


public final class AppRootRouterDependencyMock: AppRootRouterDependency {
    public init() { }
    public init(libraryLicenseDriver: LibraryLicenseDriverProtocolAT, buildEnvDriver: BuildEnvDriverProtocolAT, deviceInfoDriver: DeviceInfoDriverProtocolAT, clipboardDriver: ClipboardDriverProtocolAT, firebaseLogDriver: FirebaseLogDriverProtocolAT, firebaseSetupDriver: FirebaseSetupDriverProtocolAT, firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT) {
        self._libraryLicenseDriver = libraryLicenseDriver
        self._buildEnvDriver = buildEnvDriver
        self._deviceInfoDriver = deviceInfoDriver
        self._clipboardDriver = clipboardDriver
        self._firebaseLogDriver = firebaseLogDriver
        self._firebaseSetupDriver = firebaseSetupDriver
        self._firebaseRemoteConfigDriver = firebaseRemoteConfigDriver
    }

    public typealias LibraryLicenseDriverProtocolAT = LibraryLicenseDriverProtocolMock
    public typealias BuildEnvDriverProtocolAT = BuildEnvDriverProtocolMock

    public private(set) var libraryLicenseDriverSetCallCount = 0
    private var _libraryLicenseDriver: LibraryLicenseDriverProtocolAT!  { didSet { libraryLicenseDriverSetCallCount += 1 } }
    public var libraryLicenseDriver: LibraryLicenseDriverProtocolAT {
        get { return _libraryLicenseDriver }
        set { _libraryLicenseDriver = newValue }
    }
    public typealias DeviceInfoDriverProtocolAT = DeviceInfoDriver<DeviceNameDriverProtocolMock>
    public typealias FirebaseLogDriverProtocolAT = FirebaseLogDriverProtocolMock
    public typealias ClipboardDriverProtocolAT = ClipboardDriver

    public private(set) var buildEnvDriverSetCallCount = 0
    private var _buildEnvDriver: BuildEnvDriverProtocolAT!  { didSet { buildEnvDriverSetCallCount += 1 } }
    public var buildEnvDriver: BuildEnvDriverProtocolAT {
        get { return _buildEnvDriver }
        set { _buildEnvDriver = newValue }
    }
    public typealias FirebaseSetupDriverProtocolAT = FirebaseSetupDriverProtocolMock

    public private(set) var deviceInfoDriverSetCallCount = 0
    private var _deviceInfoDriver: DeviceInfoDriverProtocolAT!  { didSet { deviceInfoDriverSetCallCount += 1 } }
    public var deviceInfoDriver: DeviceInfoDriverProtocolAT {
        get { return _deviceInfoDriver }
        set { _deviceInfoDriver = newValue }
    }

    public private(set) var clipboardDriverSetCallCount = 0
    private var _clipboardDriver: ClipboardDriverProtocolAT!  { didSet { clipboardDriverSetCallCount += 1 } }
    public var clipboardDriver: ClipboardDriverProtocolAT {
        get { return _clipboardDriver }
        set { _clipboardDriver = newValue }
    }
    public typealias FirebaseRemoteConfigDriverProtocolAT = FirebaseRemoteConfigDriverProtocolMock

    public private(set) var firebaseLogDriverSetCallCount = 0
    private var _firebaseLogDriver: FirebaseLogDriverProtocolAT!  { didSet { firebaseLogDriverSetCallCount += 1 } }
    public var firebaseLogDriver: FirebaseLogDriverProtocolAT {
        get { return _firebaseLogDriver }
        set { _firebaseLogDriver = newValue }
    }

    public private(set) var firebaseSetupDriverSetCallCount = 0
    private var _firebaseSetupDriver: FirebaseSetupDriverProtocolAT!  { didSet { firebaseSetupDriverSetCallCount += 1 } }
    public var firebaseSetupDriver: FirebaseSetupDriverProtocolAT {
        get { return _firebaseSetupDriver }
        set { _firebaseSetupDriver = newValue }
    }

    public private(set) var firebaseRemoteConfigDriverSetCallCount = 0
    private var _firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT!  { didSet { firebaseRemoteConfigDriverSetCallCount += 1 } }
    public var firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT {
        get { return _firebaseRemoteConfigDriver }
        set { _firebaseRemoteConfigDriver = newValue }
    }
}

public final class DeviceInfoPresenterDependencyMock: DeviceInfoPresenterDependency {
    public init() { }
    public init(buildEnvDriver: BuildEnvDriverProtocolAT, deviceInfoDriver: DeviceInfoDriverProtocolAT, clipboardDriver: ClipboardDriverProtocolAT) {
        self._buildEnvDriver = buildEnvDriver
        self._deviceInfoDriver = deviceInfoDriver
        self._clipboardDriver = clipboardDriver
    }

    public typealias BuildEnvDriverProtocolAT = BuildEnvDriverProtocolMock
    public typealias DeviceInfoDriverProtocolAT = DeviceInfoDriver<DeviceNameDriverProtocolMock>
    public typealias ClipboardDriverProtocolAT = ClipboardDriver

    public private(set) var buildEnvDriverSetCallCount = 0
    private var _buildEnvDriver: BuildEnvDriverProtocolAT!  { didSet { buildEnvDriverSetCallCount += 1 } }
    public var buildEnvDriver: BuildEnvDriverProtocolAT {
        get { return _buildEnvDriver }
        set { _buildEnvDriver = newValue }
    }

    public private(set) var deviceInfoDriverSetCallCount = 0
    private var _deviceInfoDriver: DeviceInfoDriverProtocolAT!  { didSet { deviceInfoDriverSetCallCount += 1 } }
    public var deviceInfoDriver: DeviceInfoDriverProtocolAT {
        get { return _deviceInfoDriver }
        set { _deviceInfoDriver = newValue }
    }

    public private(set) var clipboardDriverSetCallCount = 0
    private var _clipboardDriver: ClipboardDriverProtocolAT!  { didSet { clipboardDriverSetCallCount += 1 } }
    public var clipboardDriver: ClipboardDriverProtocolAT {
        get { return _clipboardDriver }
        set { _clipboardDriver = newValue }
    }
}

public final class HomeTabPresenterDependencyMock: HomeTabPresenterDependency {
    public init() { }


}

public final class SettingPresenterDependencyMock: SettingPresenterDependency {
    public init() { }


}

public final class TaskListPresenterDependencyMock: TaskListPresenterDependency {
    public init() { }


}

public final class BuildEnvDriverProtocolMock: BuildEnvDriverProtocol {
    public init() { }
    public init(buildScheme: BuildScheme, buildConfiguration: BuildConfiguration) {
        self._buildScheme = buildScheme
        self._buildConfiguration = buildConfiguration
    }


    public private(set) var buildSchemeSetCallCount = 0
    private var _buildScheme: BuildScheme!  { didSet { buildSchemeSetCallCount += 1 } }
    public var buildScheme: BuildScheme {
        get { return _buildScheme }
        set { _buildScheme = newValue }
    }

    public private(set) var buildConfigurationSetCallCount = 0
    private var _buildConfiguration: BuildConfiguration!  { didSet { buildConfigurationSetCallCount += 1 } }
    public var buildConfiguration: BuildConfiguration {
        get { return _buildConfiguration }
        set { _buildConfiguration = newValue }
    }
}

public final class ClipboardDriverProtocolMock: ClipboardDriverProtocol {
    public init() { }
    public init(copiedValue: String? = nil) {
        self.copiedValue = copiedValue
    }


    public private(set) var copiedValueSetCallCount = 0
    public var copiedValue: String? = nil { didSet { copiedValueSetCallCount += 1 } }

    public private(set) var copyCallCount = 0
    public var copyHandler: ((String) -> ())?
    public func copy(_ string: String)  {
        copyCallCount += 1
        if let copyHandler = copyHandler {
            copyHandler(string)
        }
        
    }
}

public final class DeviceInfoUseCaseDependencyMock: DeviceInfoUseCaseDependency {
    public init() { }
    public init(buildEnvDriver: BuildEnvDriverProtocolAT, deviceInfoDriver: DeviceInfoDriverProtocolAT) {
        self._buildEnvDriver = buildEnvDriver
        self._deviceInfoDriver = deviceInfoDriver
    }

    public typealias BuildEnvDriverProtocolAT = BuildEnvDriverProtocolMock
    public typealias DeviceInfoDriverProtocolAT = DeviceInfoDriver<DeviceNameDriverProtocolMock>

    public private(set) var buildEnvDriverSetCallCount = 0
    private var _buildEnvDriver: BuildEnvDriverProtocolAT!  { didSet { buildEnvDriverSetCallCount += 1 } }
    public var buildEnvDriver: BuildEnvDriverProtocolAT {
        get { return _buildEnvDriver }
        set { _buildEnvDriver = newValue }
    }

    public private(set) var deviceInfoDriverSetCallCount = 0
    private var _deviceInfoDriver: DeviceInfoDriverProtocolAT!  { didSet { deviceInfoDriverSetCallCount += 1 } }
    public var deviceInfoDriver: DeviceInfoDriverProtocolAT {
        get { return _deviceInfoDriver }
        set { _deviceInfoDriver = newValue }
    }
}

public final class DeviceInfoUseCaseMock: DeviceInfoUseCase {
    public init() { }


    public private(set) var getDeviceInfoValueCallCount = 0
    public var getDeviceInfoValueHandler: ((DeviceInfoType) -> (String))?
    public func getDeviceInfoValue(_ deviceInfoType: DeviceInfoType) -> String {
        getDeviceInfoValueCallCount += 1
        if let getDeviceInfoValueHandler = getDeviceInfoValueHandler {
            return getDeviceInfoValueHandler(deviceInfoType)
        }
        return ""
    }
}

public final class DeviceNameDriverProtocolMock: DeviceNameDriverProtocol {
    public init() { }
    public init(deviceName: String = "") {
        self.deviceName = deviceName
    }


    public private(set) var deviceNameSetCallCount = 0
    public var deviceName: String = "" { didSet { deviceNameSetCallCount += 1 } }
}

public final class FirebaseLogDriverProtocolMock: FirebaseLogDriverProtocol {
    public init() { }


    public private(set) var logCallCount = 0
    public var logHandler: ((LogEventType, LogLevel, String, String, Int) -> ())?
    public func log(_ _arg: LogEventType, level: LogLevel, file: String, function: String, line: Int)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(_arg, level, file, function, line)
        }
        
    }
}

public final class FirebaseRemoteConfigDriverProtocolMock: FirebaseRemoteConfigDriverProtocol {
    public init() { }


    public private(set) var fetchAndActivateCallCount = 0
    public var fetchAndActivateHandler: (() async throws -> ())?
    public func fetchAndActivate() async throws  {
        fetchAndActivateCallCount += 1
        if let fetchAndActivateHandler = fetchAndActivateHandler {
            try await fetchAndActivateHandler()
        }
        
    }

    public private(set) var getValueCallCount = 0
    public var getValueHandler: ((RemoteConfigType) throws -> (Any))?
    public func getValue<T: RemoteConfigurable>(remoteConfigType: RemoteConfigType) throws -> T {
        getValueCallCount += 1
        if let getValueHandler = getValueHandler {
            return try getValueHandler(remoteConfigType) as! T
        }
        fatalError("getValueHandler returns can't have a default value thus its handler must be set")
    }
}

public final class FirebaseSetupDriverProtocolMock: FirebaseSetupDriverProtocol {
    public init() { }


    public private(set) var configureCallCount = 0
    public var configureHandler: (() -> ())?
    public func configure()  {
        configureCallCount += 1
        if let configureHandler = configureHandler {
            configureHandler()
        }
        
    }
}

public final class LibraryLicenseDriverProtocolMock: LibraryLicenseDriverProtocol {
    public init() { }
    public init(licenseList: [License] = [License]()) {
        self.licenseList = licenseList
    }


    public private(set) var licenseListSetCallCount = 0
    public var licenseList: [License] = [License]() { didSet { licenseListSetCallCount += 1 } }
}

public final class LogDriverProtocolMock: LogDriverProtocol {
    public init() { }


    public private(set) var logCallCount = 0
    public var logHandler: ((LogEventType, LogLevel, String, String, Int) -> ())?
    public func log(_ _arg: LogEventType, level: LogLevel, file: String, function: String, line: Int)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(_arg, level, file, function, line)
        }
        
    }
}

public final class OSLogDriverProtocolMock: OSLogDriverProtocol {
    public init() { }


    public private(set) var logCallCount = 0
    public var logHandler: ((LogEventType, LogLevel, String, String, Int) -> ())?
    public func log(_ _arg: LogEventType, level: LogLevel, file: String, function: String, line: Int)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(_arg, level, file, function, line)
        }
        
    }
}

public final class AppRootPresenterDependencyMock: AppRootPresenterDependency {
    public init() { }
    public init(firebaseLogDriver: FirebaseLogDriverProtocolAT, firebaseSetupDriver: FirebaseSetupDriverProtocolAT, firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT) {
        self._firebaseLogDriver = firebaseLogDriver
        self._firebaseSetupDriver = firebaseSetupDriver
        self._firebaseRemoteConfigDriver = firebaseRemoteConfigDriver
    }

    public typealias FirebaseLogDriverProtocolAT = FirebaseLogDriverProtocolMock
    public typealias FirebaseSetupDriverProtocolAT = FirebaseSetupDriverProtocolMock
    public typealias FirebaseRemoteConfigDriverProtocolAT = FirebaseRemoteConfigDriverProtocolMock

    public private(set) var firebaseLogDriverSetCallCount = 0
    private var _firebaseLogDriver: FirebaseLogDriverProtocolAT!  { didSet { firebaseLogDriverSetCallCount += 1 } }
    public var firebaseLogDriver: FirebaseLogDriverProtocolAT {
        get { return _firebaseLogDriver }
        set { _firebaseLogDriver = newValue }
    }

    public private(set) var firebaseSetupDriverSetCallCount = 0
    private var _firebaseSetupDriver: FirebaseSetupDriverProtocolAT!  { didSet { firebaseSetupDriverSetCallCount += 1 } }
    public var firebaseSetupDriver: FirebaseSetupDriverProtocolAT {
        get { return _firebaseSetupDriver }
        set { _firebaseSetupDriver = newValue }
    }

    public private(set) var firebaseRemoteConfigDriverSetCallCount = 0
    private var _firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT!  { didSet { firebaseRemoteConfigDriverSetCallCount += 1 } }
    public var firebaseRemoteConfigDriver: FirebaseRemoteConfigDriverProtocolAT {
        get { return _firebaseRemoteConfigDriver }
        set { _firebaseRemoteConfigDriver = newValue }
    }
}

public final class LicenseListPresenterDependencyMock: LicenseListPresenterDependency {
    public init() { }
    public init(libraryLicenseDriver: LibraryLicenseDriverProtocolAT) {
        self._libraryLicenseDriver = libraryLicenseDriver
    }

    public typealias LibraryLicenseDriverProtocolAT = LibraryLicenseDriverProtocolMock

    public private(set) var libraryLicenseDriverSetCallCount = 0
    private var _libraryLicenseDriver: LibraryLicenseDriverProtocolAT!  { didSet { libraryLicenseDriverSetCallCount += 1 } }
    public var libraryLicenseDriver: LibraryLicenseDriverProtocolAT {
        get { return _libraryLicenseDriver }
        set { _libraryLicenseDriver = newValue }
    }
}

public final class DeviceInfoDriverProtocolMock: DeviceInfoDriverProtocol {
    public init() { }
    public init(appVersion: String = "", appBuildNumber: String = "", deviceName: String = "", deviceIdentifier: String = "", isSimulator: Bool = false, isPreview: Bool = false, osType: String = "", osVersion: String = "", timezone: String = "", language: String = "") {
        self.appVersion = appVersion
        self.appBuildNumber = appBuildNumber
        self.deviceName = deviceName
        self.deviceIdentifier = deviceIdentifier
        self.isSimulator = isSimulator
        self.isPreview = isPreview
        self.osType = osType
        self.osVersion = osVersion
        self.timezone = timezone
        self.language = language
    }


    public private(set) var appVersionSetCallCount = 0
    public var appVersion: String = "" { didSet { appVersionSetCallCount += 1 } }

    public private(set) var appBuildNumberSetCallCount = 0
    public var appBuildNumber: String = "" { didSet { appBuildNumberSetCallCount += 1 } }

    public private(set) var deviceNameSetCallCount = 0
    public var deviceName: String = "" { didSet { deviceNameSetCallCount += 1 } }

    public private(set) var deviceIdentifierSetCallCount = 0
    public var deviceIdentifier: String = "" { didSet { deviceIdentifierSetCallCount += 1 } }

    public private(set) var isSimulatorSetCallCount = 0
    public var isSimulator: Bool = false { didSet { isSimulatorSetCallCount += 1 } }

    public private(set) var isPreviewSetCallCount = 0
    public var isPreview: Bool = false { didSet { isPreviewSetCallCount += 1 } }

    public private(set) var osTypeSetCallCount = 0
    public var osType: String = "" { didSet { osTypeSetCallCount += 1 } }

    public private(set) var osVersionSetCallCount = 0
    public var osVersion: String = "" { didSet { osVersionSetCallCount += 1 } }

    public private(set) var timezoneSetCallCount = 0
    public var timezone: String = "" { didSet { timezoneSetCallCount += 1 } }

    public private(set) var languageSetCallCount = 0
    public var language: String = "" { didSet { languageSetCallCount += 1 } }
}

