#!/bin/bash

# SwiftFormatコマンドを使ったフォーマットチェックと適用のスクリプト
# Ref: SwiftFormatを導入してコード記法を統一化 - https://tech.mirrativ.stream/entry/2022/06/27/060850

tools_package="./DISampleAppPackage"

# SwiftFormatコマンドの基本形
base_swiftformat_command="swift run --package-path $tools_package mint run swiftformat"

# フォーマット実行のSwiftFormatコマンド
swiftformat_format_command="$base_swiftformat_command"

# チェック専用のSwiftFormatコマンド
swiftformat_check_command="$base_swiftformat_command --lint"

should_fail=false
# ステージされたSwiftファイルをリストアップ
staged_swift_files=$(git diff --diff-filter=d --staged --name-only | grep -e '\(.*\).swift$')

if [ -z "$staged_swift_files" ]; then
    echo "✅ No staged Swift files found. Exiting."
    exit 0
fi

# 各ステージされたSwiftファイルに対してループ(一つのファイルごとにフォーマッターを走らせているので複数のファイルをステージしているだけ時間がかかってしまうのを解消したい)
for file in $staged_swift_files; do
    # ステージされていない変更を一時保存
    unstaged_patch=$(git diff "$file")
    if [ -n "$unstaged_patch" ]; then
        # ステージされていない変更を元に戻す
        git restore "$file"
    fi

    # ステージされたファイルのフォーマットをチェック
    if ! $swiftformat_check_command "$file"; then
        echo "Formatting required for $file. Applying SwiftFormat..."
        # チェックに失敗した場合はフォーマットを適用
        $swiftformat_format_command "$file"
        should_fail=true
    fi

    # ステージされていない変更を再適用
    if [ -n "$unstaged_patch" ]; then
        echo "$unstaged_patch" | git apply --whitespace=nowarn
    fi
done

# 終了時のメッセージ
if $should_fail; then
    echo "⛔️ Some files were formatted by SwiftFormat. Please review and stage the changes."
    exit 1
else
    echo "✅ All staged Swift files pass SwiftFormat checks."
    exit 0
fi
